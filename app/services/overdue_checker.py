from datetime import datetime, timedelta, time
from app.db.db import SessionLocal
from app.models.rent import Rent
from app.models.notification import Notification
from zoneinfo import ZoneInfo

TZ = ZoneInfo("Asia/Bangkok")   # ‚Üê NEW: ‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì

def check_overdue_rents():
    """
    ‚úÖ ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤
    - ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö aware (Asia/Bangkok) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    - ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ DB/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î tz ‡∏≠‡∏≠‡∏Å (naive) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå DATETIME ‡πÄ‡∏î‡∏¥‡∏°
    """
    db = SessionLocal()
    try:
        # ---------- ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á (aware) ----------
        now_aw = datetime.now(TZ)                      # ‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏ö‡∏ö Asia/Bangkok (aware)
        created_count = 0

        cutoff_time = time(18, 0, 0)                   # üïï ‡πÄ‡∏™‡πâ‡∏ô‡∏ï‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô 18:00 (‡πÑ‡∏°‡πà‡∏°‡∏µ tz)
        today = now_aw.date()

        start_today_aw  = datetime.combine(today, time(0, 0), tzinfo=TZ)         # 00:00 ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (aware)
        cutoff_today_aw = datetime.combine(today, cutoff_time, tzinfo=TZ)        # 18:00 ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (aware)

        last30_aw   = now_aw + timedelta(minutes=30)                              # ‡πÄ‡∏™‡πâ‡∏ô ‚â§ 30 ‡∏ô‡∏≤‡∏ó‡∏µ (aware)
        soon_upper_aw = (cutoff_today_aw if now_aw < cutoff_today_aw
                         else datetime.combine(today + timedelta(days=1), cutoff_time, tzinfo=TZ))

        # ---------- ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô naive ‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö DB ----------
        def _naive(d): return d.replace(tzinfo=None)

        now                   = _naive(now_aw)
        start_today           = _naive(start_today_aw)
        cutoff_today          = _naive(cutoff_today_aw)
        last_minute_threshold = _naive(last30_aw)
        soon_upper            = _naive(soon_upper_aw)

        base_not_returned = (Rent.status_id != 3)       # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô

        def already_has(user_id, template, equipment_id):
            return db.query(Notification.notification_id).filter(
                Notification.user_id == user_id,
                Notification.template == template,
                Notification.payload.contains(f'"equipment_id": {equipment_id}')
            ).first() is not None

        def _close_prior(user_id, equipment_id, templates):
            # ‡∏õ‡∏¥‡∏î‡πÇ‡∏ô‡∏ï‡∏¥‡∏Ç‡∏±‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
            db.query(Notification).filter(
                Notification.user_id == user_id,
                Notification.payload.contains(f'"equipment_id": {equipment_id}'),
                Notification.template.in_(templates),
                Notification.status == "unread"
            ).update({"status": "read"}, synchronize_session=False)

        # ========================= Queries =========================
        # üü° ‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: (> 30 ‡∏ô‡∏≤‡∏ó‡∏µ) .. ‡∏ñ‡∏∂‡∏á cutoff ‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        rents_due_soon = db.query(Rent).filter(
            base_not_returned,
            Rent.due_date >  last_minute_threshold,
            Rent.due_date <= soon_upper
        ).all()

        # üü† ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ
        rents_due_very_soon = db.query(Rent).filter(
            base_not_returned,
            Rent.due_date >  now,
            Rent.due_date <= last_minute_threshold
        ).all()

        # üî¥ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        if now_aw >= cutoff_today_aw:   # ‡πÉ‡∏ä‡πâ aware ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏ß‡∏±‡∏ô/‡∏£‡∏≠‡∏ö
            overdue_rents = db.query(Rent).filter(
                base_not_returned,
                Rent.due_date <= cutoff_today
            ).all()
        else:
            overdue_rents = db.query(Rent).filter(
                base_not_returned,
                Rent.due_date < start_today
            ).all()

        # ========================= Creates =========================
        cutoff_str = cutoff_time.strftime("%H:%M")  # ‡πÉ‡∏ä‡πâ‡πÇ‡∏ä‡∏ß‡πå‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        created_ts = now                             # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ã‡∏ü‡∏•‡∏á Notification (naive ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏î‡∏¥‡∏°)

        # üü° due_soon
        for rent in rents_due_soon:
            if already_has(rent.user_id, "due_soon", rent.equipment_id):
                continue
            db.add(Notification(
                user_id=rent.user_id,
                channel="system",
                template="due_soon",
                payload={
                    "equipment_id": rent.equipment_id,
                    "equipment_name": rent.equipment.name if rent.equipment else "-",
                    "due_date": rent.due_date.strftime("%Y-%m-%d %H:%M"),
                    "message": f"‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏Å‡πà‡∏≠‡∏ô {cutoff_str} ‡∏ô."
                },
                send_at=created_ts, status="unread", created_at=created_ts,
            ))
            created_count += 1

        # üü† due_very_soon (‡∏õ‡∏¥‡∏î due_soon ‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á)
        for rent in rents_due_very_soon:
            if already_has(rent.user_id, "due_very_soon", rent.equipment_id):
                continue
            db.add(Notification(
                user_id=rent.user_id,
                channel="system",
                template="due_very_soon",
                payload={
                    "equipment_id": rent.equipment_id,
                    "equipment_name": rent.equipment.name if rent.equipment else "-",
                    "due_date": rent.due_date.strftime("%Y-%m-%d %H:%M"),
                    "message": f"‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏õ‡∏¥‡∏î {cutoff_str} ‡∏ô. ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡∏ö‡∏Ñ‡∏∑‡∏ô!"
                },
                send_at=created_ts, status="unread", created_at=created_ts,
            ))
            _close_prior(rent.user_id, rent.equipment_id, ["due_soon"])
            created_count += 1

        # üî¥ overdue_notice (‡∏õ‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
        for rent in overdue_rents:
            if already_has(rent.user_id, "overdue_notice", rent.equipment_id):
                continue
            db.add(Notification(
                user_id=rent.user_id,
                channel="system",
                template="overdue_notice",
                payload={
                    "equipment_id": rent.equipment_id,
                    "equipment_name": rent.equipment.name if rent.equipment else "-",
                    "due_date": rent.due_date.strftime("%Y-%m-%d %H:%M"),
                    "message": "‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î/‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö"
                },
                send_at=created_ts, status="unread", created_at=created_ts,
            ))
            _close_prior(rent.user_id, rent.equipment_id, ["due_soon", "due_very_soon"])
            created_count += 1

        db.commit()
        return f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà {created_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"

    except Exception:
        db.rollback()
        raise
    finally:
        db.close()
