from datetime import datetime, timedelta, timezone
from sqlalchemy import text
from app.db.db import SessionLocal
from app.repositories.home_repository import HomeRepository
from app.repositories.notification_repository import NotificationRepository


class NotificationService:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà"""

    def __init__(self):
        self.db = SessionLocal()
        self.home_repo = HomeRepository(SessionLocal)
        self.notif_repo = NotificationRepository(self.db)

    def process_due_notifications(self):
        """
        ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å rent_returns
        - ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 3 ‡∏£‡∏∞‡∏î‡∏±‡∏ö (‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î / ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡∏∂‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î / ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 1 ‡∏ä‡∏°.)
        """
        THAI_TZ = timezone(timedelta(hours=7))
        now = datetime.now(THAI_TZ).replace(tzinfo=None)
        created_count = 0

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô
        with self.db as session:
            all_rents = session.execute(text("""
                SELECT rent_id, user_id, due_date, start_date
                FROM rent_returns
                WHERE return_date IS NULL
            """)).fetchall()

        # ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        for r in all_rents:
            rent_id = r.rent_id
            user_id = r.user_id
            due_raw = r.due_date

            # üß† ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÄ‡∏™‡∏°‡∏≠
            try:
                due_str = str(due_raw).split('.')[0]
                due = datetime.strptime(due_str, "%Y-%m-%d %H:%M:%S")
            except Exception as e:
                print(f"[WARN] ‚ùå ‡πÅ‡∏õ‡∏•‡∏á due_date ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ rent_id={rent_id}, raw={due_raw} ({e})")
                continue

            diff_seconds = (due - now).total_seconds()
            diff_hours = diff_seconds / 3600
            diff_minutes = int(diff_seconds // 60)
            h, m = divmod(diff_minutes, 60)

            print(f"[DEBUG] rent_id={rent_id}, user_id={user_id}, due={due}, diff={h:02d}:{m:02d} (‚âà{diff_hours:.2f}h)")

            # ‚úÖ 1. ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡πâ‡∏ß (diff < 0)
            if diff_hours < 0:
                if self._create_notification(user_id, rent_id, "overdue", f"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° #{rent_id} ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß!"):
                    created_count += 1

            # ‚úÖ 2. ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
            elif 0 <= diff_hours <= 1:
                if self._create_notification(user_id, rent_id, "due_now", f"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° #{rent_id} ‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á!"):
                    created_count += 1

            # ‚úÖ 3. ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î)
            elif 1 < diff_hours <= 24:
                if self._create_notification(user_id, rent_id, "due_tomorrow", f"‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° #{rent_id} ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ!"):
                    created_count += 1

        self.db.commit()
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà {created_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n")
        self.db.close()

    def _create_notification(self, user_id, rent_id, template, message):
        """‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)"""
        THAI_TZ = timezone(timedelta(hours=7))
        now = datetime.now(THAI_TZ).replace(tzinfo=None)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô rent_id ‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°
        if self.notif_repo.exists_today(user_id, rent_id, template):
            print(f"[SKIP] ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏° {template} (rent_id={rent_id}) ‡∏Ç‡∏≠‡∏á user_id={user_id} (‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)")
            return False

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å rent_id ‡∏•‡∏á‡πÉ‡∏ô payload JSON
        self.notif_repo.create({
            "user_id": user_id,
            "channel": "system",
            "template": template,
            "payload": {
                "rent_id": rent_id,   # ‚úÖ ‡πÉ‡∏™‡πà rent_id ‡∏•‡∏á payload
                "message": message
            },
            "send_at": now,
            "status": "unread",
            "created_at": now,
        })
        print(f"[NEW] üîî ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô {template} (rent_id={rent_id}) ‡πÉ‡∏´‡πâ user_id={user_id}")
        return True
