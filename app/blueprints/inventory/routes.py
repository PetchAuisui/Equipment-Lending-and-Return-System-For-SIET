from flask import render_template, request, redirect, url_for, current_app, flash, abort
from app.blueprints.inventory import inventory_bp
from app.services import lend_device_service
from app.db.db import SessionLocal
from app.models.equipment import Equipment
from app.models.equipment_images import EquipmentImage
from sqlalchemy.orm import joinedload
from sqlalchemy.exc import IntegrityError
from werkzeug.utils import secure_filename
from datetime import datetime
import os, uuid
from app.services.return_item import ReturnItemService


@inventory_bp.route('/equipments/lend_device')
def lend_device():
    # üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å service
    equipments = lend_device_service.get_equipment_list()
    # ‚úÖ ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ UI
    return render_template("pages_inventory/lend_device.html", equipments=equipments)


@inventory_bp.route('/equipments/lend', methods=['GET'])
def lend():
    return render_template('pages_inventory/lend.html')


@inventory_bp.route("/admin/equipments")
def admin_equipment_list():
    q = request.args.get("q", "").strip()
    category_filter = request.args.get("category", "").strip()

    db = SessionLocal()
    try:
        # ‚úÖ preload images ‡∏î‡πâ‡∏ß‡∏¢ joinedload
        query = db.query(Equipment).options(joinedload(Equipment.images))

        if q:
            query = query.filter(
                (Equipment.name.ilike(f"%{q}%")) |
                (Equipment.code.ilike(f"%{q}%"))
            )

        if category_filter:
            query = query.filter(Equipment.category == category_filter)

        items = query.order_by(Equipment.created_at.desc()).all()
        return render_template("pages_inventory/admin_equipment_list.html", items=items)
    finally:
        db.close()


# üìÑ ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
@inventory_bp.route("/admin/equipments/<int:eid>", methods=["GET"], endpoint="admin_equipment_detail")
def admin_equipment_detail(eid):
    db = SessionLocal()
    try:
        item = (
            db.query(Equipment)
              .options(joinedload(Equipment.images))
              .filter(Equipment.equipment_id == eid)   # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á filter ‡∏î‡πâ‡∏ß‡∏¢ eid
              .first()
        )
        if not item:
            abort(404)
        return render_template("pages_inventory/admin_equipment_detail.html", item=item)
    finally:
        db.close()


# ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
@inventory_bp.route("/admin/equipments/new", methods=["GET", "POST"])
def admin_equipment_new():
    if request.method == "POST":
        name = (request.form.get("name") or "").strip()
        code = (request.form.get("code") or "").strip()
        category = (request.form.get("category") or "").strip()
        detail = (request.form.get("detail") or "").strip()
        brand = (request.form.get("brand") or "").strip()
        status = (request.form.get("status") or "").strip()
        buy_date_raw = (request.form.get("buy_date") or "").strip()

        # üìå ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        img = request.files.get("image")
        current_app.logger.info("UPLOAD_FOLDER = %s", current_app.config['UPLOAD_FOLDER'])
        current_app.logger.info("IMAGE FIELD = %s", img.filename if img else None)

        # üìå ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        buy_date = None
        if buy_date_raw:
            try:
                buy_date = datetime.strptime(buy_date_raw, "%Y-%m-%d").date()
            except ValueError:
                buy_date = None

        # üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if not name or not code:
            flash("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç", "error")
            return render_template("pages_inventory/admin_equipment_new.html")

        # üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        if img and img.filename:
            allowed = current_app.config.get("ALLOWED_IMAGE_EXT", {"jpg","jpeg","png","gif","webp"})
            if "." not in img.filename or img.filename.rsplit(".", 1)[1].lower() not in allowed:
                flash("‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û jpg, jpeg, png, gif, webp", "error")
                return render_template("pages_inventory/admin_equipment_new.html")

        db = SessionLocal()
        try:
            # üìå 1) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡∏°‡πà
            now = datetime.utcnow()
            new_equipment = Equipment(
                name=name,
                code=code,
                category=category,
                detail=detail,
                brand=brand,
                buy_date=buy_date,
                status=status or "available",
                created_at=now,            )
            db.add(new_equipment)
            db.commit()
            db.refresh(new_equipment)

            # üìå 2) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‚Üí ‡πÄ‡∏ã‡∏ü‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å path
            if img and img.filename:
                ext = secure_filename(img.filename).rsplit(".", 1)[1].lower()
                fname = f"{uuid.uuid4().hex}.{ext}"
                upload_dir = current_app.config['UPLOAD_FOLDER']
                os.makedirs(upload_dir, exist_ok=True)

                save_path = os.path.join(upload_dir, fname)
                img.save(save_path)
                current_app.logger.info("SAVE DST = %s", save_path)
                current_app.logger.info("FILE EXISTS = %s", os.path.exists(save_path))

                image_path = f"uploads/equipment/{fname}"
                img_record = EquipmentImage(
                    equipment_id=new_equipment.equipment_id,
                    image_path=image_path,
                    created_at=datetime.utcnow()
                )
                db.add(img_record)
                db.commit()

            flash("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "success")
            return redirect(url_for("inventory.admin_equipment_list"))

        except IntegrityError:
            db.rollback()
            flash("‡∏£‡∏´‡∏±‡∏™/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß", "error")
            return render_template("pages_inventory/admin_equipment_new.html")
        finally:
            db.close()

    # GET
    return render_template("pages_inventory/admin_equipment_new.html")


@inventory_bp.route("/admin/equipments/<int:eid>/edit", methods=["GET", "POST"], endpoint="admin_equipment_edit")
def admin_equipment_edit(eid):
    db = SessionLocal()
    try:
        item = (
            db.query(Equipment)
              .options(joinedload(Equipment.images))
              .filter(Equipment.equipment_id == eid)   # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á filter ‡∏î‡πâ‡∏ß‡∏¢ eid
              .first()
        )
        if not item:
            abort(404)

        if request.method == "POST":
            name = (request.form.get("name") or "").strip()
            code = (request.form.get("code") or "").strip()
            category = (request.form.get("category") or "").strip()
            detail = (request.form.get("detail") or "").strip()
            brand = (request.form.get("brand") or "").strip()
            status = (request.form.get("status") or "").strip()
            buy_date_raw = (request.form.get("buy_date") or "").strip()

            # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
            buy_date = None
            if buy_date_raw:
                try:
                    buy_date = datetime.strptime(buy_date_raw, "%Y-%m-%d").date()
                except ValueError:
                    buy_date = None

            # ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å name/code ‚Üí flash ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
            if not name or not code:
                flash("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç", "error")
                return render_template("pages_inventory/admin_equipment_edit.html", item=item)

            # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏•‡∏á DB
            item.name = name
            item.code = code
            item.category = category
            item.detail = detail
            item.brand = brand
            item.buy_date = buy_date
            item.status = status or item.status

            # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
            img = request.files.get("image")
            if img and img.filename:
                allowed = current_app.config.get("ALLOWED_IMAGE_EXT", {"jpg","jpeg","png","gif","webp"})
                if "." not in img.filename or img.filename.rsplit(".",1)[1].lower() not in allowed:
                    flash("‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û jpg, jpeg, png, gif, webp", "error")
                    return render_template("pages_inventory/admin_equipment_edit.html", item=item)

                # ‚úÖ ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏ü‡∏•‡πå + ‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î DB)
                upload_dir = current_app.config['UPLOAD_FOLDER']
                os.makedirs(upload_dir, exist_ok=True)

                for im in list(item.images):
                    try:
                        old_file = os.path.join(upload_dir, os.path.basename(im.image_path))
                        if os.path.exists(old_file):
                            os.remove(old_file)
                    except Exception as e:
                        current_app.logger.warning("remove old image failed: %s", e)
                    db.delete(im)

                db.flush()  # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà

                # ‚úÖ ‡πÄ‡∏ã‡∏ü‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
                ext = secure_filename(img.filename).rsplit(".", 1)[1].lower()
                fname = f"{uuid.uuid4().hex}.{ext}"
                img.save(os.path.join(upload_dir, fname))

                # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
                new_img = EquipmentImage(
                    equipment_id=item.equipment_id,
                    image_path=f"uploads/equipment/{fname}",
                    created_at=datetime.utcnow()
                )
                db.add(new_img)

            # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô‡πÅ‡∏Ñ‡∏ä
            db.commit()
            flash("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß", "success")
            return redirect(url_for("inventory.admin_equipment_list"))

        # GET ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        return render_template("pages_inventory/admin_equipment_edit.html", item=item)
    finally:
        db.close()


@inventory_bp.route('/equipments/return', methods=['GET'])
def return_item_form():
    """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"""
    # ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ form ‡∏ô‡∏µ‡πâ ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏°‡∏µ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å '‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°' 
    # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
    return render_template('pages_inventory/admin_return_item.html')


@inventory_bp.route('/equipments/return', methods=['POST'])
def return_item_submit():
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"""
    
    # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ö 'code' ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ‡∏´‡∏£‡∏∑‡∏≠ 'borrow_id')
    equipment_code = (request.form.get("code") or "").strip()
    
    if not equipment_code:
        flash("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô", "error")
        return redirect(url_for('inventory.return_item_form'))

    db = SessionLocal()
    try:
        # 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
        equipment = (
            db.query(Equipment)
              .filter(Equipment.code == equipment_code)
              .first()
        )
        
        if not equipment:
            flash(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™/‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: {equipment_code}", "error")
            return redirect(url_for('inventory.return_item_form'))

        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ 'on_loan' ‡∏Ñ‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà)
        if equipment.status != 'on_loan':
            flash(f"‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå '{equipment.name}' ‡∏£‡∏´‡∏±‡∏™ {equipment_code} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡∏∑‡∏°", "error")
            # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°/‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πâ (‡πÄ‡∏ä‡πà‡∏ô ‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á BorrowRecord)
            # ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            return redirect(url_for('inventory.return_item_form'))

        # 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 'available')
        equipment.status = 'available'
        
        # 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (optional)
        # equipment.updated_at = datetime.utcnow()
        
        # 6. (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á BorrowRecord
        # ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏Ñ‡∏Ñ‡∏≠‡∏£‡πå‡∏î‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤ 'return_date'
        # latest_borrow_record = db.query(BorrowRecord).filter(...).first()
        # latest_borrow_record.return_date = datetime.utcnow()
        # db.add(latest_borrow_record) 
        
        db.commit()
        flash(f"‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå '{equipment.name}' ‡∏£‡∏´‡∏±‡∏™ {equipment_code} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success")
        return redirect(url_for('inventory.lend_device')) # ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å/‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå

    except Exception as e:
        db.rollback()
        current_app.logger.error("Return item failed: %s", e)
        flash("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "error")
        return redirect(url_for('inventory.return_item_form'))
    finally:
        db.close()

@inventory_bp.route("/user/return/<int:borrow_id>", methods=["POST"])
def user_submit_return(borrow_id):
    db = SessionLocal()
    try:
        return_service = ReturnItemService(db)
        # ... ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ user_id ‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å session ‡∏´‡∏£‡∏∑‡∏≠ token ...
        
        updated_record, message = return_service.user_request_return(borrow_id)

        if updated_record:
            flash(message, "success")
        else:
            flash(message, "error")
            
        return redirect(url_for("...")) # ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    finally:
        db.close()

# ...
@inventory_bp.route("/admin/confirm_return/<int:borrow_id>", methods=["POST"])
def admin_confirm_return_item(borrow_id):
    db = SessionLocal()
    try:
        return_service = ReturnItemService(db)
        # ... ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ admin_id ‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å session ...
        admin_id = 1 # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ ID ‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á Admin ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà

        updated_record, message = return_service.admin_confirm_return(borrow_id, admin_id)

        if updated_record:
            flash(message, "success")
        else:
            flash(message, "error")
            
        return redirect(url_for("...")) # ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Admin
    finally:
        db.close()

@inventory_bp.route("/admin/returns/pending")
def admin_pending_returns():
    db = SessionLocal()
    try:
        return_service = ReturnItemService(db)
        pending_records = return_service.get_pending_returns_list()
        # ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡πÉ‡∏´‡πâ template
        return render_template("pages_inventory/admin_return_item.html", pending_records=pending_records)
    finally:
        db.close()