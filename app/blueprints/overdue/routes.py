from flask import Blueprint, jsonify, session, Response, request
from app.db.db import SessionLocal
from app.models.notification import Notification
from app.models.equipment import Equipment
from app.services.overdue_checker import check_overdue_rents   
from datetime import datetime
import json

overdue_bp = Blueprint("overdue", __name__, url_prefix="/overdue")

TEMPLATES = {
    "due_soon": {
        "title": "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô",
        "fmt":   "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ô‡∏≥ {name} ‡∏°‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏Å‡πà‡∏≠‡∏ô 18:00 ‡∏ô. (‡∏Å‡∏≥‡∏´‡∏ô‡∏î {due})",
        "level": "warning", "icon": "ri-time-line",
    },
    "due_very_soon": {
        "title": "‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á 30 ‡∏ô‡∏≤‡∏ó‡∏µ",
        "fmt":   "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡∏ö‡∏ô‡∏≥ {name} ‡∏°‡∏≤‡∏Ñ‡∏∑‡∏ô (‡∏Å‡∏≥‡∏´‡∏ô‡∏î {due})",
        "level": "warning", "icon": "ri-alarm-warning-line",
    },
    "overdue_notice": {
        "title": "‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô",
        "fmt":   "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ {name} ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô (‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î {due}) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏•‡∏∞‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö",
        "level": "danger",  "icon": "ri-error-warning-line",
    },
}

def _render_notif(n, db):
    # 1) ‡πÅ‡∏õ‡∏•‡∏á payload ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô dict ‡πÄ‡∏™‡∏°‡∏≠ (‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á JSON)
    p = n.payload or {}
    if isinstance(p, str):
        try:
            p = json.loads(p)
        except Exception:
            p = {}

    # 2) ‡∏´‡∏≤ equipment_id / name ‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ô‡πà ‡πÜ
    eid = p.get("equipment_id")
    name = p.get("equipment_name")
    if not name and eid:
        # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô payload
        name = db.query(Equipment.name).filter(Equipment.equipment_id == eid).scalar()
    if not name:
        name = f"‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå #{eid or '-'}"

    # 3) ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î (‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á ISO string ‡πÅ‡∏•‡∏∞ plain string)
    due_raw = p.get("due_date")
    due_fmt = "-"
    if due_raw:
        try:
            # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö "YYYY-MM-DD HH:MM" ‡∏´‡∏£‡∏∑‡∏≠ ISO "YYYY-MM-DDTHH:MM:SS"
            due_dt = datetime.fromisoformat(due_raw.replace("T", " "))
            due_fmt = due_dt.strftime("%Y-%m-%d %H:%M")
        except Exception:
            due_fmt = due_raw  # ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°

    # 4) ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
    tpl = TEMPLATES.get(
        n.template,
        {"title": "‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "fmt": "{name} (‡∏Å‡∏≥‡∏´‡∏ô‡∏î {due})", "level": "info", "icon": "ri-information-line"},
    )
    text = tpl["fmt"].format(name=name, due=due_fmt)

    # 5) ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    return {
        "id": n.notification_id,
        "template": n.template,
        "status": n.status,
        "created_at": n.created_at.strftime("%Y-%m-%d %H:%M"),
        "title": tpl["title"],
        "text": text,
        "level": tpl["level"],
        "icon": tpl["icon"],
    }

@overdue_bp.route("/get-notifications")
def get_notifications():
    """
    ‚úÖ Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    - GET /overdue/get-notifications
    - ‡∏ñ‡πâ‡∏≤‡πÉ‡∏™‡πà ?all=1 ‚Üí ‡∏à‡∏∞‡πÑ‡∏î‡πâ "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (read + unread)"
    - ‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà ‚Üí ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ unread
    üëâ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏≥‡∏´‡∏ô‡πâ‡∏≤ "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô" ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ ?all=1
    """
    if not session.get("is_authenticated"):
        return Response(json.dumps({"error":"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô"}, ensure_ascii=False),
                        content_type="application/json", status=401)

    user_id = session.get("user_id")
    show_all = request.args.get("all") in ("1","true","yes")
    db = SessionLocal()
    try:
        q = db.query(Notification).filter(Notification.user_id == user_id)
        if not show_all:
            q = q.filter(Notification.status == "unread")
        rows = q.order_by(Notification.created_at.desc()).all()
        out = [_render_notif(n, db) for n in rows]
        return Response(json.dumps(out, ensure_ascii=False), content_type="application/json")
    finally:
        db.close()

@overdue_bp.route("/run-check")
def run_overdue_check():
    """‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠ (‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ)"""
    msg = check_overdue_rents()
    return Response(msg, mimetype="text/plain")


@overdue_bp.route("/mark-read/<int:notif_id>", methods=["POST"])
def mark_read(notif_id):
    """
    ‚úÖ Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô 'read'
    - ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î‡∏õ‡∏¥‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (X)
    """

    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô read (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° X ‡πÉ‡∏ô UI)"""
    if not session.get("is_authenticated"):
        return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô"}), 401

    db = SessionLocal()
    try:
        notif = db.query(Notification).filter(
            Notification.notification_id == notif_id,
            Notification.user_id == session.get("user_id")
        ).first()
        if not notif:
            return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"}), 404

        notif.status = "read"
        db.commit()
        return jsonify({"message": "‡∏õ‡∏¥‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"})
    except Exception as e:
        db.rollback()
        return jsonify({"error": f"server error: {e}"}), 500
    finally:
        db.close()

