# app/repositories/return_item.py

# ‚ùå ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏¥‡∏°:
# from app.repositories.base_repository import BaseRepository 
# ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô:
from app.repositories.base_repository import BaseJsonRepository 
from app.models.return_item import BorrowRecord
from app.models.equipment import Equipment 
from app.db.db import SessionLocal
from sqlalchemy.orm import joinedload
from datetime import datetime


class ReturnItemRepository(BaseJsonRepository): # üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡∏ö‡∏ó‡∏≠‡∏î
    """
    Repository ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (Return Item)
    
    ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö BorrowRecord Model ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
    """
    def __init__(self, db_session: SessionLocal):
        """‡∏Å‡∏≥‡∏´‡∏ô‡∏î Model ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà Repository ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
        # ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô BaseJsonRepository
        super().__init__(db_session, BorrowRecord)

    # ... (‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
    # get_pending_returns
    # get_latest_loan
    # mark_as_pending_return
    # confirm_return
    
    def get_pending_returns(self):
        """
        ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠ Admin ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        """
        return (
            self.db_session.query(BorrowRecord)
            .options(joinedload(BorrowRecord.equipment), 
                     joinedload(BorrowRecord.user)) 
            .filter(BorrowRecord.return_status == 'pending_return')
            .order_by(BorrowRecord.user_return_date.asc())
            .all()
        )

    def get_latest_loan(self, equipment_id: int):
        """
        ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô (return_status != 'returned')
        """
        return (
            self.db_session.query(BorrowRecord)
            .filter(BorrowRecord.equipment_id == equipment_id)
            .filter(BorrowRecord.return_status.in_(['on_loan', 'pending_return']))
            .order_by(BorrowRecord.borrow_date.desc())
            .first()
        )

    def mark_as_pending_return(self, borrow_id: int):
        """
        ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏õ‡πá‡∏ô 'pending_return' (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏∑‡∏ô)
        """
        record = self.get_by_id(borrow_id)
        if record:
            record.return_status = 'pending_return'
            record.user_return_date = datetime.utcnow()
            self.db_session.commit()
            return record
        return None

    def confirm_return(self, borrow_id: int, admin_id: int):
        """
        Admin ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô:
        1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ BorrowRecord ‡πÄ‡∏õ‡πá‡∏ô 'returned'
        2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Equipment ‡πÄ‡∏õ‡πá‡∏ô 'available'
        """
        record = self.get_by_id(borrow_id)
        if record:
            # 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï BorrowRecord
            record.return_status = 'returned'
            record.admin_confirm_date = datetime.utcnow()
            record.admin_confirm_id = admin_id
            
            # 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Equipment
            equipment = (
                self.db_session.query(Equipment)
                .filter(Equipment.equipment_id == record.equipment_id)
                .first()
            )
            if equipment:
                equipment.status = 'available'
            
            self.db_session.commit()
            return record
        return None
