from app.db.db import SessionLocal
from app.db.models import Subject,User,RentReturn, Equipment
from datetime import datetime, time
from zoneinfo import ZoneInfo
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import select
from sqlalchemy.orm import Session

def get_all_subjects():
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á subjects
    """
    db = SessionLocal()
    try:
        subjects = db.query(Subject).all()
        return [
            {
                "subject_id": s.subject_id,
                "subject_code": s.subject_code,
                "subject_name": s.subject_name
            }
            for s in subjects
        ]
    finally:
        db.close()

def get_all_users():
    """
    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
    """
    db = SessionLocal()
    try:
        users = db.query(User).all()
        return [
            {
                "user_id": u.user_id,
                "name": u.name,
                "member_type": u.member_type
            }
            for u in users
        ]
    finally:
        db.close()

current_time = datetime.now(ZoneInfo("Asia/Bangkok")).replace(tzinfo=None)


def insert_rent_record(data):
    """
    ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á rent_returns
    ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á equipments
    """
    import time as pytime
    from sqlalchemy.exc import SQLAlchemyError
    from datetime import datetime, time
    from zoneinfo import ZoneInfo

    retry_delays = [5, 10, 30]
    max_retries = len(retry_delays)
    attempt = 0

    while attempt < max_retries:
        db = SessionLocal()
        try:
            # ‚úÖ LOCK ROW ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏∑‡∏°
            equipment = db.execute(
                select(Equipment)
                .where(Equipment.code == data["code"])
                .with_for_update()
            ).scalar_one_or_none()

            if not equipment:
                raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

            if equipment.status != "available":
                raise ValueError("‚ùå ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")

            # ‚úÖ ‡∏´‡∏≤ user
            user = db.query(User).filter(User.name == data["borrower_name"]).first()
            if not user:
                raise ValueError("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")

            subject_val = data.get("subject_id")
            teacher_val = data.get("teacher_confirmed")

            # ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Bangkok (‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á start_date ‡πÅ‡∏•‡∏∞ created_at)
            current_time = datetime.now(ZoneInfo("Asia/Bangkok")).replace(tzinfo=None)
            print(f"üïì Current Bangkok Time: {current_time}")

            # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì due_date
            due_date = datetime.combine(
                datetime.strptime(data["return_date"], "%Y-%m-%d").date(),
                time(hour=18, minute=0, second=0)
            ).replace(tzinfo=None)

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á RentReturn record ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ current_time
            rent_record = RentReturn(
                equipment_id=equipment.equipment_id,
                user_id=user.user_id,
                subject_id=int(subject_val) if subject_val else None,
                start_date=current_time,  # ‚Üê ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                due_date=due_date,
                teacher_confirmed=int(teacher_val) if teacher_val else None,
                reason=data.get("reason"),
                status_id=data["status_id"],
                created_at=current_time   # ‚Üê ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
            )

            db.add(rent_record)

            # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
            equipment.status = "unavailable"
            db.add(equipment)

            # ‚úÖ COMMIT
            db.commit()
            db.close()
            print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ start_date={current_time}")
            return {"status": "success"}

        except (SQLAlchemyError, ValueError) as e:
            db.rollback()
            db.close()
            attempt += 1
            print(f"‚ö†Ô∏è Attempt {attempt}/{max_retries} failed: {e}")
            if attempt < max_retries:
                delay = retry_delays[attempt - 1]
                print(f"‚è≥ ‡∏£‡∏≠ {delay} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô retry ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
                pytime.sleep(delay)

    print("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å retry 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    return {"status": "failed"}
