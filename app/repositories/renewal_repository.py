from datetime import datetime
from app.db.db import SessionLocal
from app.db.models import Renewal, RentReturn, User, Equipment, EquipmentImage


def insert_renewal(data):
    """
    ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á renewals
    ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ rent_returns.status_id = 5 ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    """
    db = SessionLocal()
    try:
        # ‚úÖ 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° record ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á renewals
        new_record = Renewal(
            rent_id=data["rent_id"],
            old_due=data["old_due"],
            new_due=data["new_due"],
            note=data["note"],
            created_at=data["created_at"],
            status="pending"
        )
        db.add(new_record)

        # ‚úÖ 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï status_id = 5 ‡πÉ‡∏ô rent_returns ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Å
        db.query(RentReturn).filter(RentReturn.rent_id == data["rent_id"]).update(
            {"status_id": 5}
        )
        print(f"üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï RentReturn ID={data['rent_id']} ‚Üí status_id=5")

        # ‚úÖ 3. commit ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        db.commit()
        print(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ rent_id={data['rent_id']} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    except Exception as e:
        db.rollback()
        print("‚ùå Database Error:", e)
        raise
    finally:
        db.close()


def is_pending_request_exists(rent_id):
    """
    ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠ pending ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rent_id ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    """
    db = SessionLocal()
    try:
        exists = db.query(Renewal).filter(
            Renewal.rent_id == rent_id,
            Renewal.status == "pending"
        ).first() is not None
        if exists:
            print(f"‚ö†Ô∏è ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ pending ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rent_id={rent_id}")
        return exists
    finally:
        db.close()


def get_renewal_info(rent_id: int):
    """
    ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á rent_id
    ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°, ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î, ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤, ‡∏û‡∏≤‡∏ò‡∏£‡∏π‡∏õ
    """
    db = SessionLocal()
    try:
        # üîπ Join ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        latest = (
            db.query(
                Renewal.renewal_id,
                User.name.label("borrower_name"),
                Equipment.name.label("equipment_name"),
                RentReturn.start_date,
                RentReturn.due_date.label("old_due"),
                Renewal.new_due.label("new_due"),
                Renewal.status,
                Renewal.note,
                Equipment.equipment_id
            )
            .join(RentReturn, Renewal.rent_id == RentReturn.rent_id)
            .join(User, RentReturn.user_id == User.user_id)
            .join(Equipment, RentReturn.equipment_id == Equipment.equipment_id)
            .filter(Renewal.rent_id == rent_id)
            .order_by(Renewal.renewal_id.desc())
            .first()
        )

        if not latest:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö rent_id={rent_id}")
            return None

        # üîπ ‡∏î‡∏∂‡∏á path ‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
        image_paths = (
            db.query(EquipmentImage.image_path)
            .filter(EquipmentImage.equipment_id == latest.equipment_id)
            .all()
        )
        images = [img.image_path for img in image_paths]

        # ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô dict
        result = {
            "renewal_id": latest.renewal_id,
            "borrower_name": latest.borrower_name,
            "equipment_name": latest.equipment_name,
            "images": images,
            "start_date": latest.start_date.strftime("%Y-%m-%d %H:%M"),
            "old_due": latest.old_due.strftime("%Y-%m-%d %H:%M"),
            "new_due": latest.new_due.strftime("%Y-%m-%d %H:%M"),
            "status": latest.status,
            "note": latest.note,
        }

        print(f"üì¶ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ rent_id={rent_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return result

    except Exception as e:
        print("‚ùå Database Error:", e)
        raise
    finally:
        db.close()
