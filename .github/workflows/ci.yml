name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Python 3.13
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
      FLASK_ENV: test
      SECRET_KEY: test-secret

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install flask sqlalchemy werkzeug itsdangerous click typing_extensions \
                        ruff pytest pytest-cov
          fi

      - name: Install ruff
        run: python -m pip install ruff

      - name: Lint (ruff)
        run: |
          python -m ruff --version
          python -m ruff check .

      - name: Init database schema (SQLite)
        run: |
          python - <<'PY'
          from app.db.db import engine, Base
          import app.db.models  # noqa: F401
          Base.metadata.create_all(bind=engine)
          print("✅ SQLite schema created")
          PY

      - name: Import smoke test (create_app)
        run: |
          python - <<'PY'
          from app import create_app
          app = create_app()
          print("✅ App created:", app.name)
          PY

      - name: Install pytest
        run: |
          python -m pip install pytest pytest-cov

      - name: Run tests (pytest)
        if: ${{ hashFiles('**/tests/**') != '' }}
        run: |
          python -m pytest -q --maxfail=1 --disable-warnings --cov=app --cov-report=xml

      - name: Upload coverage
        if: ${{ hashFiles('**/tests/**') != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml

  deploy_prod:
    name: Deploy Production to Railway
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ vars.HEALTHCHECK_URL_PROD }}
    concurrency:
      group: deploy-prod
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (for Railway CLI)
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Railway CLI
        run: npm i -g @railway/cli

      # ❌ ไม่ต้อง login/link/เลือก env ถ้าใช้ Project Token
      - name: Deploy to Railway (Production)
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }} # ← ใส่ Project Token ของ env=production
          RAILWAY_SERVICE: ${{ secrets.RAILWAY_SERVICE }}
        run: |
          railway --version
          railway up --service "$RAILWAY_SERVICE" --ci --detach

      - name: Health check (Prod)
        env:
          URL: ${{ vars.HEALTHCHECK_URL_PROD }}
        run: |
          echo "Health check: $URL"
          for i in {1..30}; do
            if curl -fsS "$URL"; then
              echo "✅ Production healthy"
              exit 0
            fi
            echo "⏳ Waiting for app to become healthy ($i/30)..."
            sleep 10
          done
          echo "❌ Production not healthy in time"
          exit 1
